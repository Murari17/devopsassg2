name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-south-1
  EKS_CLUSTER_NAME: devopsasg1-eks-cluster
  ECR_REPOSITORY: devopsasg1-app
  KUSTOMIZE_VERSION: v5.0.1

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scanning
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      continue-on-error: true

    - name: Run tfsec security scan
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        soft_fail: true
        format: sarif
        additional_args: --out tfsec-results.sarif

    - name: Upload tfsec results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: tfsec-results.sarif

    - name: Run Checkov static analysis
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        quiet: true
        soft_fail: true
        framework: terraform
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-results.sarif

  build-and-scan:
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build Docker image
      run: |
        docker build -t $ECR_REPOSITORY:$GITHUB_SHA ./app
        docker tag $ECR_REPOSITORY:$GITHUB_SHA $ECR_REPOSITORY:latest

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Create ECR repository if not exists
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY

    - name: Push image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker tag $ECR_REPOSITORY:$GITHUB_SHA $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
        docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  terraform-plan:
    runs-on: ubuntu-latest
    needs: [security-scan, build-and-scan]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"

    - name: Terraform Plan
      run: terraform plan -var-file="terraform.tfvars" -out=tfplan

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan
        path: tfplan

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: terraform-plan

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan

  deploy-to-kubernetes:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.27.0'

    - name: Install kubeseal
      run: |
        wget https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.24.0/kubeseal-0.24.0-linux-amd64.tar.gz
        tar -xvzf kubeseal-0.24.0-linux-amd64.tar.gz
        sudo install -m 755 kubeseal /usr/local/bin/kubeseal

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Install Sealed Secrets Controller
      run: |
        kubectl apply -f https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.24.0/controller.yaml

    - name: Wait for Sealed Secrets Controller
      run: |
        kubectl wait --for=condition=Available deployment/sealed-secrets-controller -n kube-system --timeout=300s

    - name: Create and seal secrets
      run: |
        # Create namespace if not exists
        kubectl create namespace devopsasg1 --dry-run=client -o yaml | kubectl apply -f -
        
        # Create database secret
        kubectl create secret generic db-secret \
          --from-literal=username=${{ secrets.DB_USERNAME }} \
          --from-literal=password=${{ secrets.DB_PASSWORD }} \
          --namespace=devopsasg1 \
          --dry-run=client -o yaml > db-secret.yaml
        
        # Seal the secret
        kubeseal -f db-secret.yaml -w db-sealed-secret.yaml
        
        # Apply sealed secret
        kubectl apply -f db-sealed-secret.yaml

    - name: Deploy application to Kubernetes
      env:
        ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
      run: |
        # Update deployment with new image
        kubectl set image deployment/devopsasg1-app app=$ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA -n devopsasg1 || \
        kubectl create deployment devopsasg1-app --image=$ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA -n devopsasg1
        
        # Expose the deployment
        kubectl expose deployment devopsasg1-app --port=80 --target-port=80 --type=LoadBalancer -n devopsasg1 || true
        
        # Wait for deployment
        kubectl rollout status deployment/devopsasg1-app -n devopsasg1

    - name: Get application URL
      run: |
        echo "Waiting for LoadBalancer to be ready..."
        sleep 60
        kubectl get service devopsasg1-app -n devopsasg1
